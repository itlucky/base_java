package com.itlucky.java8.streamAPI;

/**
 * ForkJoin 框架  、 Java8并行流
 *
 * Fork/Join框架 ： 就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），
 *                 再将一个个的小任务运算的结果进行join汇总。
 *
 * Fork/Join框架与传统线程池的区别
 * 采用“工作窃取”模式( work-stealing) :
 *      当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，
 *      然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。
 *
 * 相对于一般的线程池实现, fork/join框架的优势体现在对其中包含的任务的处理方式上。
 * 在一般的线程池中,如果一个线程正在执行的任务由于某些原因无法继续运行,那么该线程会
 * 处于等待状态。而在fork/join框架实现中,如果某个子问题由于等待另外一个子问题的完
 * 成而无法继续运行。那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行.这种
 * 方式减少了线程的等待时间,提高了性能。
 *
 *  ☆☆☆ Java8的并行流底层用的就是ForkJoin框架 ☆☆☆
 *
 *  并行流：就是把一个内容分成几个数据块，并用不同的线程分别处理每个数据块的流
 *          Java 8 中将并行进行了优化，我们可以很容易的对数据进行操作；
 *          Stream API 可以声明性地通过 parallel() 与 sequential() 在并行流与串行流之间切换
 *
 *
 */
public class ForkJoin {



}
